generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ValidRoles {
  admin
  user
}

enum OrderStatus {
  PENDING
  PAID
}

model User {
  user_id      String        @id @default(uuid())
  fullname     String
  address      String
  email        String        @unique
  password     String
  roles        ValidRoles[]
  shoppingCart ShoppingCart?
  orders       Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?
}

model Product {
  product_id   String                @id @default(uuid())
  name         String                @unique
  description  String
  price        Float
  stock        Int
  image_url    String
  image_id     String
  category_id  String
  category     Category              @relation(fields: [category_id], references: [category_id])
  shoppingCart ShoppingCartProduct[]
  order        OrderProduct[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime?
}

model Category {
  category_id String    @id @default(uuid())
  name        String    @unique
  description String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
}

model ShoppingCart {
  shopping_cart_id String                @id @default(uuid())
  user_id          String                @unique
  user             User                  @relation(fields: [user_id], references: [user_id])
  total            Float
  products         ShoppingCartProduct[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime?
}

model Order {
  order_id  String         @id @default(uuid())
  user_id   String
  user      User           @relation(fields: [user_id], references: [user_id])
  total     Float
  status    OrderStatus    @default(PENDING)
  products  OrderProduct[]
  createdAt DateTime       @default(now())
  updatedAt DateTime?
}

model ShoppingCartProduct {
  shopping_cart_id String
  product_id       String
  shoppingCart     ShoppingCart @relation(fields: [shopping_cart_id], references: [shopping_cart_id])
  product          Product      @relation(fields: [product_id], references: [product_id])
  quantity         Int
  subtotal         Float
  createdAt        DateTime     @default(now())
  updatedAt        DateTime?

  @@id([shopping_cart_id, product_id])
}

model OrderProduct {
  order_id   String
  product_id String
  order      Order     @relation(fields: [order_id], references: [order_id])
  product    Product   @relation(fields: [product_id], references: [product_id])
  quantity   Int
  subtotal   Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  @@id([order_id, product_id])
}
